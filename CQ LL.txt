#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *next;
};
struct node *front=0;
struct node *rear=0;
void enqueue(int x){
    struct node *newnode;
    newnode=(struct node *)malloc(sizeof(struct node));
    newnode->data=x;
    newnode->next=0;
    if(rear==0){
        front=rear=newnode;
        rear->next=front;
    }
    else{
        rear->next=newnode;
        rear=newnode;
        rear->next=front;
    }
}
void dequeue()
{
    struct node *temp;
    temp=front;
    if(front==0&&rear==0){
        printf("queue is empty\n");
    }
    else if(front==rear){
        front=rear=0;
        free(temp);
    }
    else{
        printf("the ele deleted is:%d",front->data);
        front=front->next;
        rear->next=front;
        free(temp);
    }
}
void peek(){
    printf("the front ele is:%d",front->data);
}
void display(){
    struct node *temp;
    temp=front;
    if(front==0&&rear==0){
        printf("queue is empty\n");
    }
    else{
        while(temp->next!=front){
            printf("%d",temp->data);
            temp=temp->next;
        }
        printf("%d",temp->data);
    }
}
int main()
{
    int choice,x;
    while(1){
        printf("\n1.enqueue\n2.display\n3.dequeue\n4.peek\n5.exit\n");
        printf("enter choice:\n");
        scanf("%d",&choice);
        switch(choice){
            case 1:printf("enter value:\n");
            scanf("%d",&x);
            enqueue(x);
            break;
            case 2:display();
            break;
            case 3:dequeue();
            break;
            case 4:peek();
            break;
            case 5:exit(0);
            break;
            default:printf("wrong choice");
        }
    }
}
